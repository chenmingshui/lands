#include <iostream>
#include <vector>
#include "CLsLimit.h"
#include "CRandom.h"
#include "PlotUtilities.h"
#include "CountingModel.h"
#include "time.h"
#include "BayesianBase.h"
#include "LimitBands.h"
#include "UtilsROOT.h"

using std::cout;
using std::endl;
using namespace lands;

int main(int argc, const char* argv[]){

	// currently, this package mainly deals with simple counting experiments for single channel or multiple channal combinations
	// it can do CLs with and without systematics
	// The systematics uncertainties can be treated correlated and also uncorrelated

	// this example will give you instructions on how to run computations for one mass point

	// ---- How to Run this example:  on lxplus.cern.ch
	/*
	   source ~mschen/public/set64bitRoot.csh
	   cd CountingModel;
	   gmake clean;
	   gmake;
	   cd test;
	   ./example 3   

	 */
	int iSeed = 1234; // seed for random generator
	int debug=0;   // debug information is turned off
	int DoPoint = 0; // from 115 ---> 250 : 0->20
	int doWhat = 0;
	int doSingleChannel = -1; // default is doing combination
	int nexps_to_build_m2lnQ =100000; // how many  toy MC's  to build -2lnQ distributions 
	int nexps_to_projectingLimit = 1000; // how many outcomes to play with statistical bands
	int ntoysToDoSignificance = 1000000; // significance calculation, building -2lnQ for background only hypothesis...
	int bErrors = 1;
	if(argc>=2){
		DoPoint=atoi( argv[1] );	
		if(argc>=3){		
			iSeed=atoi(argv[2]);
			if(argc>=4){		
				doWhat=atoi(argv[3]);
				if(argc>=5){		
					debug=atoi(argv[4]);
					if(argc>=6) {
						doSingleChannel=atoi(argv[5]);
						if(argc>=7) {
							nexps_to_build_m2lnQ=atoi(argv[6]);
							if(argc>=8) {
								nexps_to_projectingLimit=atoi(argv[7]);
								if(argc>=9) {
									ntoysToDoSignificance=atoi(argv[8]);
									if(argc>=10) {
										bErrors=atoi(argv[9]);
									}
								}
							}
						}
					}
				}
			}

		}
	}
	else{
		cout<<" ./example.exe DoPoint iSeed=1234 doWhat=0 debug=0 doSingleChannel=-1 nexps_to_build_m2lnQ=100000 nexps_to_projectingLimit=1000 ntoysToDoSignificance=1000000 bErrors=1" <<endl;
		exit(0);
	}
	// doWhat == 0 :   single channel, without systematics,  CLs
	// doWhat == 1 :   single channel, with systematics, CLs
	// doWhat == 2 :   three channels,  with systematics, CLs
	// doWhat == 3 :   seven channels,  with systematics, CLs



	// famous -2lnQ distributions
	vector<double> m2lnQ_SigPlusBkg;
	vector<double> m2lnQ_BkgOnly;
	double m2lnQ_Data;

	// (CLs vs R ) when tuning R to let CLs=0.05+/-0.001   for the observed data
	vector<double> evolution_CLsvsR_vCLs;
	vector<double> evolution_CLsvsR_vR;

	// results for the statistical bands 
	double rmean, rm1s,rm2s,rp1s,rp2s;  //mean, -1sigma, -2sigma, +1sigma, +2sigma
	vector<double> all_calculated_R95s;
	vector<double> cummulativeProbabilities; // all_calculated_R95s has been sorted, each of them has a cummulative probability

	clock_t start_time=clock(), cur_time=clock(); // timing


	CountingModel* cms=new CountingModel();
	CRandom *rdm = new CRandom(iSeed);
	CLsBase frequentist;
	cms->SetRdm(rdm);


	//2e2mu:
	//Summary # Evt 1fb-1 for nsigma= 2
	//Mass, mh_min, mh_max, signal, ZZ, Zbb, tt, ggZZ, qqZZ+ggZZ, Zbb+ZZ+tt+ggZZ,
	double evt_2e2m[20][10]={
		{115 ,111.24 ,117.68 ,0.0462 ,0.0155 ,0.0025 ,0.0045 ,0.0007 ,0.0162 , 0.0232},
		{120 ,115.72 ,122.93 ,0.1129 ,0.0298 ,0.0037 ,0.0045 ,0.0013 ,0.0311 , 0.0393},
		{125 ,120.79 ,127.79 ,0.2305 ,0.0441 ,0.0037 ,0.0045 ,0.0021 ,0.0462 , 0.0544},
		{130 ,125.61 ,133.08 ,0.3764 ,0.0602 ,0.0055 ,0.0045 ,0.0033 ,0.0635 , 0.0735},
		{135 ,130.76 ,137.85 ,0.5938 ,0.0633 ,0.0043 ,0.0045 ,0.0039 ,0.0672 , 0.0760},
		{140 ,135.62 ,143.02 ,0.7686 ,0.0664 ,0.0025 ,0.0045 ,0.0050 ,0.0714 , 0.0783},
		{145 ,140.43 ,148.04 ,0.9261 ,0.0707 ,0.0018 ,0.0045 ,0.0063 ,0.0770 , 0.0833},
		{150 ,145.35 ,153.19 ,0.9657 ,0.0737 ,0.0012 ,0.0000 ,0.0077 ,0.0815 , 0.0827},
		{155 ,150.20 ,158.25 ,0.8965 ,0.0763 ,0.0018 ,0.0000 ,0.0094 ,0.0856 , 0.0875},
		{160 ,154.84 ,163.42 ,0.4954 ,0.0848 ,0.0018 ,0.0045 ,0.0121 ,0.0969 , 0.1032},
		{165 ,159.56 ,168.63 ,0.2601 ,0.0899 ,0.0018 ,0.0045 ,0.0159 ,0.1058 , 0.1121},
		{170 ,164.66 ,173.60 ,0.2335 ,0.0976 ,0.0018 ,0.0089 ,0.0214 ,0.1191 , 0.1298},
		{175 ,168.97 ,179.08 ,0.3460 ,0.1322 ,0.0025 ,0.0045 ,0.0352 ,0.1674 , 0.1744},
		{180 ,174.07 ,183.95 ,0.5821 ,0.2032 ,0.0025 ,0.0000 ,0.0558 ,0.2590 , 0.2614},
		{185 ,178.82 ,189.06 ,1.4437 ,0.3945 ,0.0025 ,0.0000 ,0.0880 ,0.4825 , 0.4850},
		{190 ,183.09 ,194.57 ,1.9511 ,0.6341 ,0.0018 ,0.0045 ,0.1217 ,0.7558 , 0.7621},
		{195 ,188.02 ,199.71 ,1.9221 ,0.7295 ,0.0018 ,0.0045 ,0.1328 ,0.8623 , 0.8687},
		{200 ,192.54 ,204.93 ,2.0799 ,0.7737 ,0.0006 ,0.0000 ,0.1405 ,0.9142 , 0.9148},
		{205 ,197.03 ,210.26 ,2.1139 ,0.7907 ,0.0006 ,0.0000 ,0.1451 ,0.9358 , 0.9364},
		{250 ,237.86 ,258.43 ,1.6013 ,0.6371 ,0.0006 ,0.0000 ,0.1236 ,0.7607 , 0.7613}
	};

	//4e:
	//Summary # Evt 1fb-1 for nsigma= 2
	//Mass, mh_min, mh_max, signal, ZZ, Zbb, tt, ggZZ, qqZZ+ggZZ, Zbb+ZZ+tt+ggZZ,
	double evt_4e[20][10]={
		{115 ,109.62 ,118.59 ,0.0282 ,0.0133 ,0.0019 ,0.0000 ,0.0007 ,0.0140 ,0.0158},
		{120 ,115.57 ,122.75 ,0.0485 ,0.0148 ,0.0006 ,0.0044 ,0.0008 ,0.0155 ,0.0206},
		{125 ,119.61 ,128.41 ,0.1197 ,0.0291 ,0.0000 ,0.0044 ,0.0011 ,0.0302 ,0.0346},
		{130 ,124.47 ,133.49 ,0.2068 ,0.0391 ,0.0000 ,0.0000 ,0.0015 ,0.0407 ,0.0407},
		{135 ,129.08 ,138.58 ,0.3124 ,0.0462 ,0.0019 ,0.0000 ,0.0021 ,0.0483 ,0.0501},
		{140 ,134.29 ,143.78 ,0.4402 ,0.0486 ,0.0037 ,0.0000 ,0.0027 ,0.0513 ,0.0550},
		{145 ,139.32 ,148.56 ,0.5096 ,0.0515 ,0.0025 ,0.0000 ,0.0029 ,0.0544 ,0.0568},
		{150 ,143.77 ,153.98 ,0.5257 ,0.0562 ,0.0012 ,0.0000 ,0.0037 ,0.0598 ,0.0611},
		{155 ,148.65 ,158.82 ,0.4726 ,0.0514 ,0.0012 ,0.0000 ,0.0044 ,0.0558 ,0.0570},
		{160 ,152.76 ,164.33 ,0.2849 ,0.0599 ,0.0025 ,0.0000 ,0.0064 ,0.0663 ,0.0688},
		{165 ,158.02 ,169.26 ,0.1394 ,0.0584 ,0.0019 ,0.0044 ,0.0081 ,0.0665 ,0.0728},
		{170 ,163.15 ,174.22 ,0.1480 ,0.0651 ,0.0019 ,0.0089 ,0.0112 ,0.0763 ,0.0871},
		{175 ,168.56 ,179.06 ,0.1820 ,0.0825 ,0.0037 ,0.0089 ,0.0176 ,0.1001 ,0.1127},
		{180 ,172.45 ,184.38 ,0.3254 ,0.1450 ,0.0031 ,0.0044 ,0.0345 ,0.1795 ,0.1870},
		{185 ,177.70 ,189.37 ,0.8087 ,0.2465 ,0.0025 ,0.0044 ,0.0554 ,0.3019 ,0.3088},
		{190 ,181.08 ,195.24 ,1.0849 ,0.3989 ,0.0019 ,0.0000 ,0.0851 ,0.4840 ,0.4859},
		{195 ,186.85 ,199.97 ,1.1356 ,0.4397 ,0.0019 ,0.0044 ,0.0885 ,0.5282 ,0.5345},
		{200 ,191.34 ,205.40 ,1.1788 ,0.4764 ,0.0019 ,0.0044 ,0.0949 ,0.5713 ,0.5776},
		{205 ,195.81 ,210.31 ,1.1388 ,0.4747 ,0.0025 ,0.0089 ,0.0944 ,0.5691 ,0.5804},
		{250 ,238.38 ,257.79 ,0.8634 ,0.3182 ,0.0006 ,0.0044 ,0.0694 ,0.3875 ,0.3926}
	};
	//4mu:
	//Summary # Evt 1fb-1 for nsigma= 2
	//Mass, mh_min, mh_max, signal, ZZ, Zbb, tt, ggZZ, qqZZ+ggZZ, Zbb+ZZ+tt+ggZZ,
	double evt_4m[20][10]={
		{115 ,112.34 ,116.88 ,0.0504 ,0.0169 ,0.0012 ,0.0000 ,0.0008 ,0.0176 ,0.0189},
		{120 ,117.43 ,122.14 ,0.1027 ,0.0262 ,0.0019 ,0.0000 ,0.0011 ,0.0273 ,0.0292},
		{125 ,122.30 ,127.01 ,0.1872 ,0.0324 ,0.0025 ,0.0000 ,0.0012 ,0.0337 ,0.0362},
		{130 ,127.24 ,132.18 ,0.3494 ,0.0414 ,0.0019 ,0.0000 ,0.0017 ,0.0431 ,0.0450},
		{135 ,132.15 ,137.29 ,0.4850 ,0.0440 ,0.0019 ,0.0045 ,0.0023 ,0.0463 ,0.0527},
		{140 ,137.02 ,142.31 ,0.6359 ,0.0440 ,0.0000 ,0.0045 ,0.0029 ,0.0470 ,0.0515},
		{145 ,141.74 ,147.36 ,0.7293 ,0.0471 ,0.0012 ,0.0045 ,0.0034 ,0.0505 ,0.0563},
		{150 ,147.02 ,152.32 ,0.7263 ,0.0413 ,0.0019 ,0.0045 ,0.0042 ,0.0455 ,0.0519},
		{155 ,151.59 ,157.57 ,0.6749 ,0.0506 ,0.0006 ,0.0000 ,0.0059 ,0.0564 ,0.0571},
		{160 ,156.36 ,162.65 ,0.3516 ,0.0566 ,0.0019 ,0.0045 ,0.0075 ,0.0641 ,0.0705},
		{165 ,161.27 ,167.64 ,0.1765 ,0.0530 ,0.0019 ,0.0045 ,0.0102 ,0.0632 ,0.0696},
		{170 ,165.85 ,173.12 ,0.1794 ,0.0667 ,0.0019 ,0.0045 ,0.0158 ,0.0825 ,0.0889},
		{175 ,170.71 ,178.24 ,0.2377 ,0.0833 ,0.0000 ,0.0000 ,0.0226 ,0.1059 ,0.1059},
		{180 ,175.46 ,183.26 ,0.4381 ,0.1195 ,0.0012 ,0.0000 ,0.0364 ,0.1559 ,0.1571},
		{185 ,180.40 ,188.52 ,0.9722 ,0.2405 ,0.0006 ,0.0045 ,0.0571 ,0.2976 ,0.3027},
		{190 ,184.88 ,193.87 ,1.3799 ,0.3852 ,0.0012 ,0.0091 ,0.0750 ,0.4603 ,0.4706},
		{195 ,188.79 ,199.22 ,1.4612 ,0.4835 ,0.0031 ,0.0045 ,0.0898 ,0.5733 ,0.5809},
		{200 ,193.88 ,204.60 ,1.4765 ,0.4902 ,0.0025 ,0.0000 ,0.0904 ,0.5805 ,0.5830},
		{205 ,198.74 ,209.57 ,1.3948 ,0.4697 ,0.0000 ,0.0000 ,0.0870 ,0.5567 ,0.5567},
		{250 ,239.32 ,258.02 ,1.1309 ,0.4107 ,0.0000 ,0.0000 ,0.0793 ,0.4900 ,0.4900}
	};

	//2e2mu + 4e + 4mu
	//Summary Table at 10 TeV, 1 fb-1
	//#mH  Ns      Nb     R_nicola  R_mingshui
	double evt_tot[20][5]={
		{115 ,0.1248 ,0.0579 ,26.154 ,24.9166}, 
		{120 ,0.2641 ,0.0891 ,12.535 ,11.9361},
		{125 ,0.5374 ,0.1252 ,6.2606 ,5.99168},
		{130 ,0.9326 ,0.1592 ,3.6620 ,3.48025},
		{135 ,1.3912 ,0.1788 ,2.4759 ,2.36329},
		{140 ,1.8447 ,0.1848 ,1.8721 ,1.77542},
		{145 ,2.1650 ,0.1964 ,1.6031 ,1.52396},
		{150 ,2.2177 ,0.1957 ,1.5645 ,1.48344},
		{155 ,2.0440 ,0.2016 ,1.7018 ,1.61659},
		{160 ,1.1319 ,0.2425 ,3.1270 ,2.97053},
		{165 ,0.5760 ,0.2545 ,6.1761 ,5.84927},
		{170 ,0.5609 ,0.3058 ,6.4788 ,6.19653},
		{175 ,0.7657 ,0.3930 ,4.9159 ,4.66125},
		{180 ,1.3456 ,0.6055 ,3.0330 ,2.86436},
		{185 ,3.2246 ,1.0965 ,1.4929 ,1.30866},
		{190 ,4.4159 ,1.7186 ,1.3004 ,1.07859},
		{195 ,4.5189 ,1.9841 ,1.3584 ,1.08788},
		{200 ,4.7352 ,2.0754 ,1.3251 ,1.06585},
		{205 ,4.6475 ,2.0735 ,1.3495 ,1.07306},
		{250 ,3.5956 ,1.6439 ,1.5660 ,1.33535}
	};

	// 12 source, 4e, 4mu, 2e2mu
	//       4e      qqzz   ggzz    zbb      tt      4mu    qqzz    ggzz     zbb    tt      2e2m    qqzz    ggzz    zbb      tt 
	double err_matrix[12][15]={
		{1.1	,0.0	,1.1	,1.1	,1.1	,1.1	,0.0	,1.1	,1.1	,1.1	,1.1	,0.0	,1.1	,1.1	,1.1   },
		{1.1	,0.0	,0.0	,0.0	,0.0	,1.1	,0.0	,0.0	,0.0	,0.0	,1.1	,0.0	,0.0	,0.0	,0.0   },
		{0.00	,-1	,0.00	,0.00	,0.00	,0.00	,-1	,0.00	,0.00	,0.00	,0.00	,-1	,0.00	,0.00	,0.00  },
		{0.00	,0.00	,1.3	,0.00	,0.00	,0.00	,0.00	,1.3	,0.00	,0.00	,0.00	,0.00	,1.3	,0.00	,0.00  },
		{0.00	,0.00	,0.00	,2	,0.00	,0.00	,0.00	,0.00	,2	,0.00	,0.00	,0.00	,0.00	,2	,0.00  },
		{0.00	,0.00	,0.00	,0.00	,1.2	,0.00	,0.00	,0.00	,0.00	,1.2	,0.00	,0.00	,0.00	,0.00	,1.2   },
		{0.00	,0.00	,0.00	,0.00	,0.00	,1.04	,1.02	,1.04	,1.04	,1.04	,1.02	,1.01	,1.02	,1.02	,1.02  },
		{1.04	,1.02	,1.04	,1.04	,1.04	,0	,0	,0	,0	,0	,1.02	,1.01	,1.02	,1.02	,1.02  },
		{0.00	,0.00	,0.00	,0.00	,0.00	,1.01	,1.01	,1.01	,2	,2	,1.005	,1.005	,1.005	,1.4	,1.4   },
		{1.01	,1.01	,1.01	,2	,2	,0	,0	,0	,0	,0	,1.005	,1.005	,1.005	,1.4	,1.4   },
		{1.01	,1.01	,1.01	,1.20	,1.20	,1.01	,1.01	,1.01	,1.20	,1.20	,1.01	,1.01	,1.01	,1.20	,1.20  },
		{1.03	,0.00	,0.00	,0.00	,0.00	,1.03	,0	,0	,0	,0	,1.03	,0	,0	,0	,0     }
	};

	//  qqzz err,  depending on mass
	double err_qqzz[20][2]={
		{115,	1.013},
		{120,	1.022},
		{125,	1.020},
		{130,	1.018},
		{135,	1.019},
		{140,	1.020},
		{145,	1.022},
		{150,	1.023},
		{155,	1.024},
		{160,	1.025},
		{165,	1.026},
		{170,	1.028},
		{175,	1.028},
		{180,	1.028},
		{185,	1.028},
		{190,	1.028},
		{195,	1.029},
		{200,	1.030},
		{205,	1.031},
		{250,	1.044}
	};

	//	cout<<"deleteme 1"<<endl;

	const	int nPoint = 20;
	const	int nChannel=3; 
	const	int nSample=5;
	const	int nSource=12;
	double EventArray[nPoint][nChannel][nSample];
	double ErrorArray[nPoint][nChannel][nSample][nSource];
	for(int np=0; np<nPoint; np++){
		for(int ns=0; ns<nSample; ns++ ) {
			int nstmp;
			if(ns==0) nstmp=3;//signal
			if(ns==1) nstmp=4;//qqzz
			if(ns==2) nstmp=7;//ggzz
			if(ns==3) nstmp=5;//zbb
			if(ns==4) nstmp=6;//tt
			EventArray[np][0][ns]= evt_4e[np][nstmp]	; //4e
			EventArray[np][1][ns]= evt_4m[np][nstmp]	; //4m
			EventArray[np][2][ns]= evt_2e2m[np][nstmp]	; //2e2m
		}
	}
	for(int np=0; np<nPoint; np++){
		for(int nc=0; nc<nChannel; nc++){
			for(int ns=0; ns<nSample; ns++ ) {
				for(int so=0; so<nSource; so++){
					ErrorArray[DoPoint][nc][ns][so]=err_matrix[so][nc*5+ns]-1;
					if(ErrorArray[DoPoint][nc][ns][so]==-2) {
						ErrorArray[DoPoint][nc][ns][so]=err_qqzz[DoPoint][1]-1;
						//						cout<<nc<<" check on err_ggzz is ok:  mass at "<<evt_4m[DoPoint][0]<<" f="<<ErrorArray[DoPoint][nc][ns][so]<<endl;
					}
				}
			}
		}
	}


	// combined 
	if(doWhat==0) {		
		for(int ch=0; ch<nChannel; ch++){
			if(  doSingleChannel >=0  && ch!= doSingleChannel  ) continue;  // do combination if doSingleChannel<0 
			cms->AddChannel(EventArray[DoPoint][ch][0],EventArray[DoPoint][ch][1], EventArray[DoPoint][ch][2],
					EventArray[DoPoint][ch][3], EventArray[DoPoint][ch][4]
				       );
			for(int ns=0; ns<nSample; ns++){
				for(int so=0; so<nSource; so++){
					//cms->AddUncertainty(ch, ns, err_on_signal[ch], err_pdftype_signal[ch], err_index_correlation_signal[ch]);
					if(doSingleChannel < 0) cms->AddUncertainty(ch, ns, ErrorArray[DoPoint][ch][ns][so], 1, so+1);
					else cms->AddUncertainty(0, ns, ErrorArray[DoPoint][ch][ns][so], 1, so+1);

				}
			}
		}
	}
	else if(doWhat==1){
		// lumped  channels
		double sigtmp, bkgtmp[4];
		for(int ch=0; ch<nChannel; ch++){
			sigtmp+=EventArray[DoPoint][ch][0];
			for(int ns=1; ns<nSample; ns++) {
				bkgtmp[ns-1]+=EventArray[DoPoint][ch][ns];
			}
		}	
		cms->AddChannel(
				sigtmp, bkgtmp[0], bkgtmp[1], bkgtmp[2], bkgtmp[3]	
			       );
		for(int ns=0; ns<nSample; ns++){
			//		cms->AddUncertainty(0, ns, ErrorArray[DoPoint][0][ns], 1, 1);
		}
	}
	else if(doWhat==2){
		// lumped  channels and samples
		double sigtmp, bkgtmp;
		for(int ch=0; ch<nChannel; ch++){
			sigtmp+=EventArray[DoPoint][ch][0];
			for(int ns=1; ns<nSample; ns++) {
				bkgtmp+=EventArray[DoPoint][ch][ns];
			}
		}	
		cms->AddChannel(
				sigtmp, bkgtmp
			       );
		//	cms->AddUncertainty(0, 0, ErrorArray[DoPoint][0][0], 1, 1);
		//	cms->AddUncertainty(0, 1, ErrorArray[DoPoint][0][0], 1, 1);
	}
	else {
		cout<<"doWhat not set correctly"<<endl;
		exit(0);
	}

	cms->SetUseSystematicErrors(bErrors);
	//cms->SetUseSystematicErrors(false);
	cms->Print();

	frequentist.SetModel(cms);
	frequentist.SetDebug(debug);
	frequentist.SetRdm(rdm);
	frequentist.BuildM2lnQ(nexps_to_build_m2lnQ);
	double cls_observed = frequentist.CLs();
	cout<<"\n\t\t **** Observed CLs (w/ sys) = "<<cls_observed<<endl;
	start_time=cur_time; cur_time=clock(); cout << "\t TIME_in_BuildM2lnQ " << (cur_time - start_time)/1000. << " millisec\n";

	m2lnQ_SigPlusBkg = frequentist.Get_m2logQ_sb();
	m2lnQ_BkgOnly= frequentist.Get_m2logQ_b();
	m2lnQ_Data = frequentist.Get_m2lnQ_data();


	// getting C.L. 95% r limit for the data 
	CLsLimit clsr95;
	clsr95.SetDebug(debug);
	clsr95.DoingStatisticalBandsForCLs(cms, &frequentist, 100000);
	rmean=clsr95.CLs_mean();
	rm2s=clsr95.CLs_sigma(-2);
	rm1s=clsr95.CLs_sigma(-1);
	rp1s=clsr95.CLs_sigma(1);
	rp2s=clsr95.CLs_sigma(2);

	printf("CombinedResultsCLs_CLs -- mH=%3.3fGeV %10.5f %10.5f %10.5f %10.5f %10.5f\n",
			evt_4e[DoPoint][0], rm2s, rm1s, rmean, rp1s, rp2s); 

	vector<double> vm2logQ_b, vm2logQ_b_prob;
	SortAndCumulative(frequentist.Get_m2logQ_b(), vm2logQ_b, vm2logQ_b_prob, 1);// sort it by  decreased order // this frequentist is run done by previous step
	GetBandsByLinearInterpolation(vm2logQ_b,vm2logQ_b_prob, rm1s, rp1s, rm2s, rp2s );
	rmean=GetMeanOfSortedXwithProb(vm2logQ_b, vm2logQ_b_prob);
	printf("CombinedResultsCLs_m2lnQ_b -- mH=%3.3fGeV %10.5f %10.5f %10.5f %10.5f %10.5f\n",
			evt_4e[DoPoint][0], rm2s, rm1s, rmean, rp1s, rp2s); 

	vector<double> vm2logQ_sb, vm2logQ_sb_prob;
	SortAndCumulative(frequentist.Get_m2logQ_sb(), vm2logQ_sb, vm2logQ_sb_prob, 1); // sort it by  decreased order
	GetBandsByLinearInterpolation(vm2logQ_sb,vm2logQ_sb_prob, rm1s, rp1s, rm2s, rp2s );
	rmean=GetMeanOfSortedXwithProb(vm2logQ_sb, vm2logQ_sb_prob);

	printf("CombinedResultsCLs_m2lnQ_sb -- mH=%3.3fGeV %10.5f %10.5f %10.5f %10.5f %10.5f\n",
			evt_4e[DoPoint][0], rm2s, rm1s, rmean, rp1s, rp2s); 


	vector<double> vsignificance;
	vector<double> vsignificance_cp;
	double significance[5];
	double significance_mean = frequentist.SignificanceComputation(-1,  ntoysToDoSignificance, vsignificance, vsignificance_cp );
	start_time=cur_time; cur_time=clock(); cout << "\t TIME_in_BuildM2lnQ for significance " << (cur_time - start_time)/1.e6 << " sec\n";
	GetBandsByLinearInterpolation(vsignificance,vsignificance_cp, significance[1], significance[3], significance[0], significance[4] );
	significance[2]=GetBandByLinearInterpolation(vsignificance, vsignificance_cp, 0.5);
	printf("ToS_significance -- mH=%3.3fGeV %10.5f %10.5f %10.5f %10.5f %10.5f %10.5f\n",
			evt_4e[DoPoint][0], significance[0], significance[1], significance[2], significance[3], significance[4], significance_mean); 
	fflush(stdout);

	//return 1;

	double r_CL95 = clsr95.LimitOnSignalScaleFactor(cms, &frequentist, nexps_to_build_m2lnQ);
	cout<<"\n\t\t ****CLs Observed exclusion limit on r = "<< r_CL95 <<endl;
	start_time=cur_time; cur_time=clock(); cout << "\t TIME_in_LimitOnSignalScaleFactor " << (cur_time - start_time)/1.e6 << " sec\n";
	evolution_CLsvsR_vR = clsr95.GetvTestedScaleFactors();	
	evolution_CLsvsR_vCLs = clsr95.GetvTestedCLs();	

	cms->SetSignalScaleFactor(1.);
	BayesianBase bys(cms, 0.05, 1.e-2);
	bys.SetNumToys(20000);
	bys.SetDebug(debug);
	double rtmp = bys.Limit();
	cout<<"\n\t\t ****Bys Observed exclusion limit on r = "<< rtmp<<endl;
	start_time=cur_time; cur_time=clock(); cout << "\t TIME_in_BayesianLimit toys: "<< (cur_time - start_time)/1000. << " millisec\n";

	if(1){
		/*
		   cout<<" \t Start running for statistical bands ...  "<<endl;
		// projecting limits to get statistical bands
		clsr95.DoingStatisticalBandsForLimit(cms, &frequentist,nexps_to_build_m2lnQ, nexps_to_projectingLimit);
		rmean=clsr95.Limit_mean();
		rm1s=clsr95.Limit_sigma(-1);rm2s=clsr95.Limit_sigma(-2);rp1s=clsr95.Limit_sigma(1);rp2s=clsr95.Limit_sigma(2);
		cout<<"\n\t\t **** CLs Limit on R@95%CL (mean)  = "<<rmean<<endl;
		cout<<"\t **** R@95%CL (from -2sigma to +2sigma) : ";
		//printf(" %8.3f %8.3f %8.3f %8.3f %8.3f\n", rm2s, rm1s, rmean, rp1s, rp2s);
		printf("CombinedResultsCLs_R95 -- mH=%3.0fGeV %10.5f %10.5f %10.5f %10.5f %10.5f\n", HZZmass, rm2s, rm1s, rmean, rp1s, rp2s);

		all_calculated_R95s = clsr95.GetvLimits();
		cummulativeProbabilities = clsr95.GetvLimits_CP();
		start_time=cur_time; cur_time=clock(); cout << "\t\t TIME_in_DoingStatisticalBands " << (cur_time - start_time)/1.e6/60. << " minutes\n";
		 */
		LimitBands lb(&clsr95, &frequentist, &bys, cms);	
		lb.Bands(0.05, 1000, true, 100000, true, 20000 );

		rmean=lb.GetCLsLimitMean();
		rm1s=lb.GetCLsLimit(-1);rm2s=lb.GetCLsLimit(-2);rp1s=lb.GetCLsLimit(1);rp2s=lb.GetCLsLimit(2);
		cout<<"\t **** R@95%CL (from -2sigma to +2sigma) : ";
		printf("CombinedResultsCLs_R95 -- mH=%3.0fGeV %10.5f %10.5f %10.5f %10.5f %10.5f\n", evt_4m[DoPoint][0], rm2s, rm1s, rmean, rp1s, rp2s);

		rmean=lb.GetBysLimitMean();
		rm1s=lb.GetBysLimit(-1);rm2s=lb.GetBysLimit(-2);rp1s=lb.GetBysLimit(1);rp2s=lb.GetBysLimit(2);
		cout<<"\t **** R@95%CL (from -2sigma to +2sigma) : ";
		printf("CombinedResultsBys_R95 -- mH=%3.0fGeV %10.5f %10.5f %10.5f %10.5f %10.5f\n", evt_4m[DoPoint][0], rm2s, rm1s, rmean, rp1s, rp2s);

		/*LimitBands lb(&bys, cms);	
		  lb.SetDebug(1);
		  lb.BysLimitBands(0.05, 1000, 10000 );
		  start_time=cur_time; cur_time=clock(); cout << "\t\t TIME_in_DoingStatisticalBands " << (cur_time - start_time)/1.e6/60. << " minutes\n";
		  rmean=lb.GetBysLimitMean();
		  rm1s=lb.GetBysLimit(-1);rm2s=lb.GetBysLimit(-2);rp1s=lb.GetBysLimit(1);rp2s=lb.GetBysLimit(2);
		  cout<<"\t **** R@95%CL (from -2sigma to +2sigma) : ";
		  printf("CombinedResultsBys_R95 -- mH=%3.0fGeV %10.5f %10.5f %10.5f %10.5f %10.5f\n", evt_4m[DoPoint][0], rm2s, rm1s, rmean, rp1s, rp2s);
		 */
	}





	/*
	//  **********************************************************
	//   below just to make plots for the stored results
	//  **********************************************************

	// ---------------------plot the famous -2lnQ  for fixed s, b and d
	TPaveText *pt = SetTPaveText(0.2, 0.7, 0.3, 0.9);
	pt->AddText("-2lnQ r=1");
	char ctmp[256];
	string ssave;
	ssave="plot_M2logQ_r1";
	DrawPdfM2logQ pdfM2logQ(m2lnQ_SigPlusBkg, m2lnQ_BkgOnly, m2lnQ_Data, 
	"-2lnQ on data", "; -2lnQ; entries", ssave, pt);
	pdfM2logQ.draw();

	//----------start-----------------plot the r vs cls 
	pt = SetTPaveText(0.55, 0.7, 0.8, 0.9);
	ssave="plot_CLs_vs_R_forObservedData";
	DrawEvolution2D drawRvsCL(evolution_CLsvsR_vR, evolution_CLsvsR_vCLs, "; r = #sigma/#sigma_{SM};CLs;",ssave, pt);
	drawRvsCL.draw();

	if( doStatisticalBands==1 ) {
//----------start-----------------plot the r vs cumulative probability 
pt = SetTPaveText(0.67, 0.4, 0.8, 0.7);
pt->AddText("CLs statistical bands");
ssave="plot_cump_vs_r95";
string stitle="; CLs Limit, r = #sigma_{95%}/#sigma_{SM}; cumulative probability;";
PlotXvsCummulativeProb plotRvsP(all_calculated_R95s, cummulativeProbabilities,
rm1s, rp1s, rm2s, rp2s,ssave, stitle, pt);
plotRvsP.draw();
}
	 */
return 1;
}
