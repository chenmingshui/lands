#include <iostream>
#include "CLsLimit.h"
#include "CRandom.h"
#include "PlotUtilities.h"
#include "FloridaStyle.C"
#include <TError.h>
#include "TSystem.h"
#include "CountingModel.h"
#include "BinnedInterface.h"
#include "BayesianBase.h"
#include "LimitBands.h"
#include "TH1D.h"
#include "TFile.h"
#include "UtilsROOT.h"
using std::cout;
using std::endl;
using namespace lands;
TH1D *GetTH1D(TString sfile, TString shist);
int main(int argc, const char* argv[]){

	int iSeed = 1234; // seed for random generator
	int debug=0;   // debug information is turned off
	int DoPoint = 0; // from 115 ---> 250 : 0->20
	int Lumi= 1000;
	int onlyDoLimitBand = 0; // default is doing combination
	int nexps_to_build_m2lnQ =100000; // how many  toy MC's  to build -2lnQ distributions 
	int nexps_to_projectingLimit = 1000; // how many outcomes to play with statistical bands
	int ntoysToDoSignificance = 1000000; // significance calculation, building -2lnQ for background only hypothesis...
	int bErrors = 1;
	if(argc>=2){
		DoPoint=atoi( argv[1] );	
		if(argc>=3){		
			iSeed=atoi(argv[2]);
			if(argc>=4){		
				Lumi=atoi(argv[3]);
				if(argc>=5){		
					debug=atoi(argv[4]);
					if(argc>=6) {
						onlyDoLimitBand=atoi(argv[5]);
						if(argc>=7) {
							nexps_to_build_m2lnQ=atoi(argv[6]);
							if(argc>=8) {
								nexps_to_projectingLimit=atoi(argv[7]);
								if(argc>=9) {
									ntoysToDoSignificance=atoi(argv[8]);
									if(argc>=10) {
										bErrors=atoi(argv[9]);
									}
								}
							}
						}
					}
				}
			}

		}
	}
	else{
		cout<<" ./BinnedAnalysis.exe DoPoint iSeed=1234 Lumi=1000(pb) debug=0 onlyDoLimitBand=0 nexps_to_build_m2lnQ=100000 nexps_to_projectingLimit=1000 ntoysToDoSignificance=1000000 bErrors=1" <<endl;
		exit(0);
	}
	gSystem->Exec("mkdir plots -p");

	//gErrorIgnoreLevel=5000; // do not show the message when saving plots
	FloridaStyle(); // plots style

	//2e2mu:
	//Summary # Evt 1fb-1 for nsigma= 2
	//Mass, mh_min, mh_max, signal, ZZ, Zbb, tt, ggZZ, qqZZ+ggZZ, Zbb+ZZ+tt+ggZZ,
	double evt_2e2m[20][10]={
		{115 ,111.24 ,117.68 ,0.0462 ,0.0155 ,0.0025 ,0.0045 ,0.0007 ,0.0162 , 0.0232},
		{120 ,115.72 ,122.93 ,0.1129 ,0.0298 ,0.0037 ,0.0045 ,0.0013 ,0.0311 , 0.0393},
		{125 ,120.79 ,127.79 ,0.2305 ,0.0441 ,0.0037 ,0.0045 ,0.0021 ,0.0462 , 0.0544},
		{130 ,125.61 ,133.08 ,0.3764 ,0.0602 ,0.0055 ,0.0045 ,0.0033 ,0.0635 , 0.0735},
		{135 ,130.76 ,137.85 ,0.5938 ,0.0633 ,0.0043 ,0.0045 ,0.0039 ,0.0672 , 0.0760},
		{140 ,135.62 ,143.02 ,0.7686 ,0.0664 ,0.0025 ,0.0045 ,0.0050 ,0.0714 , 0.0783},
		{145 ,140.43 ,148.04 ,0.9261 ,0.0707 ,0.0018 ,0.0045 ,0.0063 ,0.0770 , 0.0833},
		{150 ,145.35 ,153.19 ,0.9657 ,0.0737 ,0.0012 ,0.0000 ,0.0077 ,0.0815 , 0.0827},
		{155 ,150.20 ,158.25 ,0.8965 ,0.0763 ,0.0018 ,0.0000 ,0.0094 ,0.0856 , 0.0875},
		{160 ,154.84 ,163.42 ,0.4954 ,0.0848 ,0.0018 ,0.0045 ,0.0121 ,0.0969 , 0.1032},
		{165 ,159.56 ,168.63 ,0.2601 ,0.0899 ,0.0018 ,0.0045 ,0.0159 ,0.1058 , 0.1121},
		{170 ,164.66 ,173.60 ,0.2335 ,0.0976 ,0.0018 ,0.0089 ,0.0214 ,0.1191 , 0.1298},
		{175 ,168.97 ,179.08 ,0.3460 ,0.1322 ,0.0025 ,0.0045 ,0.0352 ,0.1674 , 0.1744},
		{180 ,174.07 ,183.95 ,0.5821 ,0.2032 ,0.0025 ,0.0000 ,0.0558 ,0.2590 , 0.2614},
		{185 ,178.82 ,189.06 ,1.4437 ,0.3945 ,0.0025 ,0.0000 ,0.0880 ,0.4825 , 0.4850},
		{190 ,183.09 ,194.57 ,1.9511 ,0.6341 ,0.0018 ,0.0045 ,0.1217 ,0.7558 , 0.7621},
		{195 ,188.02 ,199.71 ,1.9221 ,0.7295 ,0.0018 ,0.0045 ,0.1328 ,0.8623 , 0.8687},
		{200 ,192.54 ,204.93 ,2.0799 ,0.7737 ,0.0006 ,0.0000 ,0.1405 ,0.9142 , 0.9148},
		{205 ,197.03 ,210.26 ,2.1139 ,0.7907 ,0.0006 ,0.0000 ,0.1451 ,0.9358 , 0.9364},
		{250 ,237.86 ,258.43 ,1.6013 ,0.6371 ,0.0006 ,0.0000 ,0.1236 ,0.7607 , 0.7613}
	};

	//4e:
	//Summary # Evt 1fb-1 for nsigma= 2
	//Mass, mh_min, mh_max, signal, ZZ, Zbb, tt, ggZZ, qqZZ+ggZZ, Zbb+ZZ+tt+ggZZ,
	double evt_4e[20][10]={
		{115 ,109.62 ,118.59 ,0.0282 ,0.0133 ,0.0019 ,0.0000 ,0.0007 ,0.0140 ,0.0158},
		{120 ,115.57 ,122.75 ,0.0485 ,0.0148 ,0.0006 ,0.0044 ,0.0008 ,0.0155 ,0.0206},
		{125 ,119.61 ,128.41 ,0.1197 ,0.0291 ,0.0000 ,0.0044 ,0.0011 ,0.0302 ,0.0346},
		{130 ,124.47 ,133.49 ,0.2068 ,0.0391 ,0.0000 ,0.0000 ,0.0015 ,0.0407 ,0.0407},
		{135 ,129.08 ,138.58 ,0.3124 ,0.0462 ,0.0019 ,0.0000 ,0.0021 ,0.0483 ,0.0501},
		{140 ,134.29 ,143.78 ,0.4402 ,0.0486 ,0.0037 ,0.0000 ,0.0027 ,0.0513 ,0.0550},
		{145 ,139.32 ,148.56 ,0.5096 ,0.0515 ,0.0025 ,0.0000 ,0.0029 ,0.0544 ,0.0568},
		{150 ,143.77 ,153.98 ,0.5257 ,0.0562 ,0.0012 ,0.0000 ,0.0037 ,0.0598 ,0.0611},
		{155 ,148.65 ,158.82 ,0.4726 ,0.0514 ,0.0012 ,0.0000 ,0.0044 ,0.0558 ,0.0570},
		{160 ,152.76 ,164.33 ,0.2849 ,0.0599 ,0.0025 ,0.0000 ,0.0064 ,0.0663 ,0.0688},
		{165 ,158.02 ,169.26 ,0.1394 ,0.0584 ,0.0019 ,0.0044 ,0.0081 ,0.0665 ,0.0728},
		{170 ,163.15 ,174.22 ,0.1480 ,0.0651 ,0.0019 ,0.0089 ,0.0112 ,0.0763 ,0.0871},
		{175 ,168.56 ,179.06 ,0.1820 ,0.0825 ,0.0037 ,0.0089 ,0.0176 ,0.1001 ,0.1127},
		{180 ,172.45 ,184.38 ,0.3254 ,0.1450 ,0.0031 ,0.0044 ,0.0345 ,0.1795 ,0.1870},
		{185 ,177.70 ,189.37 ,0.8087 ,0.2465 ,0.0025 ,0.0044 ,0.0554 ,0.3019 ,0.3088},
		{190 ,181.08 ,195.24 ,1.0849 ,0.3989 ,0.0019 ,0.0000 ,0.0851 ,0.4840 ,0.4859},
		{195 ,186.85 ,199.97 ,1.1356 ,0.4397 ,0.0019 ,0.0044 ,0.0885 ,0.5282 ,0.5345},
		{200 ,191.34 ,205.40 ,1.1788 ,0.4764 ,0.0019 ,0.0044 ,0.0949 ,0.5713 ,0.5776},
		{205 ,195.81 ,210.31 ,1.1388 ,0.4747 ,0.0025 ,0.0089 ,0.0944 ,0.5691 ,0.5804},
		{250 ,238.38 ,257.79 ,0.8634 ,0.3182 ,0.0006 ,0.0044 ,0.0694 ,0.3875 ,0.3926}
	};
	//4mu:
	//Summary # Evt 1fb-1 for nsigma= 2
	//Mass, mh_min, mh_max, signal, ZZ, Zbb, tt, ggZZ, qqZZ+ggZZ, Zbb+ZZ+tt+ggZZ,
	double evt_4m[20][10]={
		{115 ,112.34 ,116.88 ,0.0504 ,0.0169 ,0.0012 ,0.0000 ,0.0008 ,0.0176 ,0.0189},
		{120 ,117.43 ,122.14 ,0.1027 ,0.0262 ,0.0019 ,0.0000 ,0.0011 ,0.0273 ,0.0292},
		{125 ,122.30 ,127.01 ,0.1872 ,0.0324 ,0.0025 ,0.0000 ,0.0012 ,0.0337 ,0.0362},
		{130 ,127.24 ,132.18 ,0.3494 ,0.0414 ,0.0019 ,0.0000 ,0.0017 ,0.0431 ,0.0450},
		{135 ,132.15 ,137.29 ,0.4850 ,0.0440 ,0.0019 ,0.0045 ,0.0023 ,0.0463 ,0.0527},
		{140 ,137.02 ,142.31 ,0.6359 ,0.0440 ,0.0000 ,0.0045 ,0.0029 ,0.0470 ,0.0515},
		{145 ,141.74 ,147.36 ,0.7293 ,0.0471 ,0.0012 ,0.0045 ,0.0034 ,0.0505 ,0.0563},
		{150 ,147.02 ,152.32 ,0.7263 ,0.0413 ,0.0019 ,0.0045 ,0.0042 ,0.0455 ,0.0519},
		{155 ,151.59 ,157.57 ,0.6749 ,0.0506 ,0.0006 ,0.0000 ,0.0059 ,0.0564 ,0.0571},
		{160 ,156.36 ,162.65 ,0.3516 ,0.0566 ,0.0019 ,0.0045 ,0.0075 ,0.0641 ,0.0705},
		{165 ,161.27 ,167.64 ,0.1765 ,0.0530 ,0.0019 ,0.0045 ,0.0102 ,0.0632 ,0.0696},
		{170 ,165.85 ,173.12 ,0.1794 ,0.0667 ,0.0019 ,0.0045 ,0.0158 ,0.0825 ,0.0889},
		{175 ,170.71 ,178.24 ,0.2377 ,0.0833 ,0.0000 ,0.0000 ,0.0226 ,0.1059 ,0.1059},
		{180 ,175.46 ,183.26 ,0.4381 ,0.1195 ,0.0012 ,0.0000 ,0.0364 ,0.1559 ,0.1571},
		{185 ,180.40 ,188.52 ,0.9722 ,0.2405 ,0.0006 ,0.0045 ,0.0571 ,0.2976 ,0.3027},
		{190 ,184.88 ,193.87 ,1.3799 ,0.3852 ,0.0012 ,0.0091 ,0.0750 ,0.4603 ,0.4706},
		{195 ,188.79 ,199.22 ,1.4612 ,0.4835 ,0.0031 ,0.0045 ,0.0898 ,0.5733 ,0.5809},
		{200 ,193.88 ,204.60 ,1.4765 ,0.4902 ,0.0025 ,0.0000 ,0.0904 ,0.5805 ,0.5830},
		{205 ,198.74 ,209.57 ,1.3948 ,0.4697 ,0.0000 ,0.0000 ,0.0870 ,0.5567 ,0.5567},
		{250 ,239.32 ,258.02 ,1.1309 ,0.4107 ,0.0000 ,0.0000 ,0.0793 ,0.4900 ,0.4900}
	};

	//2e2mu + 4e + 4mu
	//Summary Table at 10 TeV, 1 fb-1
	//#mH  Ns      Nb     R_nicola  R_mingshui
	double evt_tot[20][5]={
		{115 ,0.1248 ,0.0579 ,26.154 ,24.9166}, 
		{120 ,0.2641 ,0.0891 ,12.535 ,11.9361},
		{125 ,0.5374 ,0.1252 ,6.2606 ,5.99168},
		{130 ,0.9326 ,0.1592 ,3.6620 ,3.48025},
		{135 ,1.3912 ,0.1788 ,2.4759 ,2.36329},
		{140 ,1.8447 ,0.1848 ,1.8721 ,1.77542},
		{145 ,2.1650 ,0.1964 ,1.6031 ,1.52396},
		{150 ,2.2177 ,0.1957 ,1.5645 ,1.48344},
		{155 ,2.0440 ,0.2016 ,1.7018 ,1.61659},
		{160 ,1.1319 ,0.2425 ,3.1270 ,2.97053},
		{165 ,0.5760 ,0.2545 ,6.1761 ,5.84927},
		{170 ,0.5609 ,0.3058 ,6.4788 ,6.19653},
		{175 ,0.7657 ,0.3930 ,4.9159 ,4.66125},
		{180 ,1.3456 ,0.6055 ,3.0330 ,2.86436},
		{185 ,3.2246 ,1.0965 ,1.4929 ,1.30866},
		{190 ,4.4159 ,1.7186 ,1.3004 ,1.07859},
		{195 ,4.5189 ,1.9841 ,1.3584 ,1.08788},
		{200 ,4.7352 ,2.0754 ,1.3251 ,1.06585},
		{205 ,4.6475 ,2.0735 ,1.3495 ,1.07306},
		{250 ,3.5956 ,1.6439 ,1.5660 ,1.33535}
	};

	// 12 source, 4e, 4mu, 2e2mu
	//       4e      qqzz   ggzz    zbb      tt      4mu    qqzz    ggzz     zbb    tt      2e2m    qqzz    ggzz    zbb      tt 
	double err_matrix[12][15]={
		{1.1	,0.0	,1.1	,1.1	,1.1	,1.1	,0.0	,1.1	,1.1	,1.1	,1.1	,0.0	,1.1	,1.1	,1.1   },
		{1.1	,0.0	,0.0	,0.0	,0.0	,1.1	,0.0	,0.0	,0.0	,0.0	,1.1	,0.0	,0.0	,0.0	,0.0   },
		{0.00	,-1	,0.00	,0.00	,0.00	,0.00	,-1	,0.00	,0.00	,0.00	,0.00	,-1	,0.00	,0.00	,0.00  },
		{0.00	,0.00	,1.3	,0.00	,0.00	,0.00	,0.00	,1.3	,0.00	,0.00	,0.00	,0.00	,1.3	,0.00	,0.00  },
		{0.00	,0.00	,0.00	,2	,0.00	,0.00	,0.00	,0.00	,2	,0.00	,0.00	,0.00	,0.00	,2	,0.00  },
		{0.00	,0.00	,0.00	,0.00	,1.2	,0.00	,0.00	,0.00	,0.00	,1.2	,0.00	,0.00	,0.00	,0.00	,1.2   },
		{0.00	,0.00	,0.00	,0.00	,0.00	,1.04	,1.02	,1.04	,1.04	,1.04	,1.02	,1.01	,1.02	,1.02	,1.02  },
		{1.04	,1.02	,1.04	,1.04	,1.04	,0	,0	,0	,0	,0	,1.02	,1.01	,1.02	,1.02	,1.02  },
		{0.00	,0.00	,0.00	,0.00	,0.00	,1.01	,1.01	,1.01	,2	,2	,1.005	,1.005	,1.005	,1.4	,1.4   },
		{1.01	,1.01	,1.01	,2	,2	,0	,0	,0	,0	,0	,1.005	,1.005	,1.005	,1.4	,1.4   },
		{1.01	,1.01	,1.01	,1.20	,1.20	,1.01	,1.01	,1.01	,1.20	,1.20	,1.01	,1.01	,1.01	,1.20	,1.20  },
		{1.03	,0.00	,0.00	,0.00	,0.00	,1.03	,0	,0	,0	,0	,1.03	,0	,0	,0	,0     }
	};

	//  qqzz err,  depending on mass
	double err_qqzz[20][2]={
		{115,	1.013},
		{120,	1.022},
		{125,	1.020},
		{130,	1.018},
		{135,	1.019},
		{140,	1.020},
		{145,	1.022},
		{150,	1.023},
		{155,	1.024},
		{160,	1.025},
		{165,	1.026},
		{170,	1.028},
		{175,	1.028},
		{180,	1.028},
		{185,	1.028},
		{190,	1.028},
		{195,	1.029},
		{200,	1.030},
		{205,	1.031},
		{250,	1.044}
	};

	const	int nPoint = 20;
	const	int nChannel=3; 
	const	int nSample=5;
	const	int nSource=12;
	double EventArray[nPoint][nChannel][nSample];
	double ErrorArray[nPoint][nChannel][nSample][nSource];
	for(int np=0; np<nPoint; np++){
		for(int ns=0; ns<nSample; ns++ ) {
			int nstmp;
			if(ns==0) nstmp=3;//signal
			if(ns==1) nstmp=4;//qqzz
			if(ns==2) nstmp=7;//ggzz
			if(ns==3) nstmp=5;//zbb
			if(ns==4) nstmp=6;//tt
			EventArray[np][0][ns]= evt_4e[np][nstmp]	; //4e
			EventArray[np][1][ns]= evt_4m[np][nstmp]	; //4m
			EventArray[np][2][ns]= evt_2e2m[np][nstmp]	; //2e2m
		}
	}
	for(int np=0; np<nPoint; np++){
		for(int nc=0; nc<nChannel; nc++){ // 4e, 4mu, 2e2m
			for(int ns=0; ns<nSample; ns++ ) {
				for(int so=0; so<nSource; so++){
					ErrorArray[DoPoint][nc][ns][so]=err_matrix[so][nc*5+ns]-1;
					if(ErrorArray[DoPoint][nc][ns][so]==-2) {
						ErrorArray[DoPoint][nc][ns][so]=err_qqzz[DoPoint][1]-1;
						//						cout<<nc<<" check on err_ggzz is ok:  mass at "<<evt_4m[DoPoint][0]<<" f="<<ErrorArray[DoPoint][nc][ns][so]<<endl;
					}
				}
			}
		}
	}


	const int nMasses=20;
	// 2e2mu //
	double  inputs_shape_sig_1[nMasses]={0.0550667,0.128404,0.267804,0.436863,0.708472,0.930397,1.10657,1.18276,1.08554,0.60068,0.312838,0.296694,0.427249,0.734097,1.8255,2.42029,2.44903,2.64208,2.64558,2.0756};
	double inputs_shape_bkg_1 = 7.4425394;

	//4e //
	double inputs_shape_sig_2[nMasses]={0.0320388,0.0584255,0.13456,0.242039,0.360033,0.520007,0.603101,0.629424,0.55136,0.331267,0.165765,0.179943,0.22557,0.40301,0.993495,1.29408,1.43136,1.46524,1.42067,1.11717};
	double inputs_shape_bkg_2 =4.1222483;

	// 4mu //
	double inputs_shape_sig_3[nMasses]={0.0584875,0.123123,0.236246,0.419223,0.59415,0.78558,0.906489,0.931633,0.85138,0.450104,0.229451,0.230631,0.309387,0.573341,1.28999,1.82273,1.9048,1.91742,1.88077,1.48554};
	double inputs_shape_bkg_3 = 5.5125225;

	clock_t start_time=clock(), cur_time=clock(); // timing
	CRandom *rdm = new CRandom(iSeed);
	CLsBase frequentist;

	CountingModel *cms=new CountingModel();
	cms->SetRdm(rdm);
	BinnedInterface *bi = new BinnedInterface(cms);

	// preparing your input histograms, you can have multiple backgrounds per channel, multipe uncertainties per sample 
	//  in a channel, number of bins and min/max of xaxis should be identical among different samples.
	TH1D *signal1, *signal2, *signal3;
	TH1D *background1, *background2, *background3;
	TH1D *hbkg1[4], *hbkg2[4], *hbkg3[4];

	TString s; s.Form("%3.0f", evt_4m[DoPoint][0]);
	signal1=(TH1D*)GetTH1D("HZZnoteXcheck/inputs/2e2mu/"+s+"Signal_1GeVbin_2e2mu.root", "RECO_Masses_finebin"+s);
	background1=(TH1D*)GetTH1D("HZZnoteXcheck/inputs/2e2mu/totBkg_1GeVbin_2e2mu.root", "RECO_Masses_finebintot");
	signal2=(TH1D*)GetTH1D("HZZnoteXcheck/inputs/4e/"+s+"Signal_1GeVbin_4e.root", "RECO_Masses_finebin"+s);
	background2=(TH1D*)GetTH1D("HZZnoteXcheck/inputs/4e/totBkg_1GeVbin_4e.root", "RECO_Masses_finebintot");
	signal3=(TH1D*)GetTH1D("HZZnoteXcheck/inputs/4mu/"+s+"Signal_1GeVbin_4mu.root", "RECO_Masses_finebin"+s);
	background3=(TH1D*)GetTH1D("HZZnoteXcheck/inputs/4mu/totBkg_1GeVbin_4mu.root", "RECO_Masses_finebintot");

	TString sbkg[4]={"ZZ", "ggZZ", "Zbb", "TT"};
	for(int i=0; i<4; i++){
		hbkg1[i]=(TH1D*)GetTH1D("HZZnoteXcheck/inputs/2e2mu/"+sbkg[i]+"Bkg_1GeVbin_2e2mu.root", "RECO_Masses_finebin"+sbkg[i]);
		hbkg2[i]=(TH1D*)GetTH1D("HZZnoteXcheck/inputs/4e/"+sbkg[i]+"Bkg_1GeVbin_4e.root", "RECO_Masses_finebin"+sbkg[i]);
		hbkg3[i]=(TH1D*)GetTH1D("HZZnoteXcheck/inputs/4mu/"+sbkg[i]+"Bkg_1GeVbin_4mu.root", "RECO_Masses_finebin"+sbkg[i]);
	}

	signal1->Scale(inputs_shape_sig_1[DoPoint]/signal1->GetEntries());
	signal2->Scale(inputs_shape_sig_2[DoPoint]/signal2->GetEntries());
	signal3->Scale(inputs_shape_sig_3[DoPoint]/signal3->GetEntries());
	background1->Scale(inputs_shape_bkg_1/background1->Integral(0, background1->GetNbinsX()+1));
	background2->Scale(inputs_shape_bkg_2/background2->Integral(0, background2->GetNbinsX()+1));
	background3->Scale(inputs_shape_bkg_3/background3->Integral(0, background3->GetNbinsX()+1));

	if(Lumi!=1000) {
		double fL = Lumi/1000.;
		signal1->Scale(fL); signal2->Scale(fL); signal3->Scale(fL);
		background1->Scale(fL); background2->Scale(fL); background3->Scale(fL);
		for(int i=0; i<4; i++){
			hbkg1[i]->Scale(fL); hbkg2[i]->Scale(fL); hbkg3[i]->Scale(fL); 
		}
	}

	/*
	   signal1->Rebin(5);
	   background1->Rebin(5);
	   signal2->Rebin(5);
	   background2->Rebin(5);
	   signal3->Rebin(5);
	   background3->Rebin(5);
	 */
	//bi->AddChannel(signal1, background1);
	//bi->AddChannel(signal2, background2);
	//bi->AddChannel(signal3, background3);
	bi->AddChannel(signal2, hbkg2[0], hbkg2[1], hbkg2[2], hbkg2[3] ); //4e
	bi->AddChannel(signal3, hbkg3[0], hbkg3[1], hbkg3[2], hbkg3[3] ); //4mu
	bi->AddChannel(signal1, hbkg1[0], hbkg1[1], hbkg1[2], hbkg1[3] ); //2e2m

	for(int ch=0; ch<nChannel; ch++){
		for(int ns=0; ns<nSample; ns++){
			for(int so=0; so<nSource; so++){
				//cms->AddUncertainty(ch, ns, err_on_signal[ch], err_pdftype_signal[ch], err_index_correlation_signal[ch]);
				//	if(doSingleChannel < 0) cms->AddUncertainty(ch, ns, ErrorArray[DoPoint][ch][ns][so], 1, so+1);
				//	else cms->AddUncertainty(0, ns, ErrorArray[DoPoint][ch][ns][so], 1, so+1);
				bi->AddUncertainty(ch, ns, ErrorArray[DoPoint][ch][ns][so], 1, so+1);

			//	cout<<"Adding uncertainties: channel "<<ch <<" sample "<< ns<<" source "<<so<<endl;
			//	fflush(stdout);
			}
		}
	}
	cms->SetUseSystematicErrors(bErrors);

	// famous -2lnQ distributions
	vector<double> m2lnQ_SigPlusBkg;
	vector<double> m2lnQ_BkgOnly;
	double m2lnQ_Data;

	// (CLs vs R ) when tuning R to let CLs=0.05+/-0.001   for the observed data
	vector<double> evolution_CLsvsR_vCLs;
	vector<double> evolution_CLsvsR_vR;

	// results for the statistical bands 
	double rmean, rm1s,rm2s,rp1s,rp2s;  //mean, -1sigma, -2sigma, +1sigma, +2sigma
	vector<double> all_calculated_R95s;
	vector<double> cummulativeProbabilities; // all_calculated_R95s has been sorted, each of them has a cummulative probability

	start_time=cur_time; cur_time=clock(); cout << "\t TIME_in_ConstructingModel " << (cur_time - start_time)/1.e6 << " sec\n";
	fflush(stdout);

	cms->Print();

	cms->RemoveChannelsWithExpectedSignal0orBkg0();
	cms->Print();


	frequentist.SetModel(cms);
	frequentist.SetDebug(debug);
	frequentist.SetRdm(rdm);

	CLsLimit clsr95;
	clsr95.SetDebug(debug);

	BayesianBase bys(cms, 0.05, 1.e-2);
	bys.SetNumToys(20000);
	bys.SetDebug(debug);

	if(onlyDoLimitBand==0) {
		frequentist.BuildM2lnQ(nexps_to_build_m2lnQ);
		double cls_observed = frequentist.CLs();
		cout<<"\n\t\t **** Observed CLs (w/ sys) = "<<cls_observed<<endl;
		start_time=cur_time; cur_time=clock(); cout << "\t TIME_in_BuildM2lnQ " << (cur_time - start_time)/1000. << " millisec\n";

		m2lnQ_SigPlusBkg = frequentist.Get_m2logQ_sb();
		m2lnQ_BkgOnly= frequentist.Get_m2logQ_b();
		m2lnQ_Data = frequentist.Get_m2lnQ_data();


		// getting C.L. 95% r limit for the data 
		clsr95.DoingStatisticalBandsForCLs(cms, &frequentist, 100000 );
		rmean=clsr95.CLs_mean();
		rm2s=clsr95.CLs_sigma(-2);
		rm1s=clsr95.CLs_sigma(-1);
		rp1s=clsr95.CLs_sigma(1);
		rp2s=clsr95.CLs_sigma(2);

		printf("CombinedResultsCLs_CLs -- mH=%3.3fGeV %10.5f %10.5f %10.5f %10.5f %10.5f\n",
				evt_4e[DoPoint][0], rm2s, rm1s, rmean, rp1s, rp2s); 

		vector<double> vm2logQ_b, vm2logQ_b_prob;
		SortAndCumulative(frequentist.Get_m2logQ_b(), vm2logQ_b, vm2logQ_b_prob, 1);// sort it by  decreased order // this frequentist is run done by previous step
		GetBandsByLinearInterpolation(vm2logQ_b,vm2logQ_b_prob, rm1s, rp1s, rm2s, rp2s );
		rmean=GetMeanOfSortedXwithProb(vm2logQ_b, vm2logQ_b_prob);
		printf("CombinedResultsCLs_m2lnQ_b -- mH=%3.3fGeV %10.5f %10.5f %10.5f %10.5f %10.5f\n",
				evt_4e[DoPoint][0], rm2s, rm1s, rmean, rp1s, rp2s); 

		vector<double> vm2logQ_sb, vm2logQ_sb_prob;
		SortAndCumulative(frequentist.Get_m2logQ_sb(), vm2logQ_sb, vm2logQ_sb_prob, 1); // sort it by  decreased order
		GetBandsByLinearInterpolation(vm2logQ_sb,vm2logQ_sb_prob, rm1s, rp1s, rm2s, rp2s );
		rmean=GetMeanOfSortedXwithProb(vm2logQ_sb, vm2logQ_sb_prob);

		printf("CombinedResultsCLs_m2lnQ_sb -- mH=%3.3fGeV %10.5f %10.5f %10.5f %10.5f %10.5f\n",
				evt_4e[DoPoint][0], rm2s, rm1s, rmean, rp1s, rp2s); 

		vector<double> vsignificance;
		vector<double> vsignificance_cp;
		double significance[5];
		double significance_mean = frequentist.SignificanceComputation(-1,  ntoysToDoSignificance, vsignificance, vsignificance_cp );
		start_time=cur_time; cur_time=clock(); cout << "\t TIME_in_BuildM2lnQ for significance " << (cur_time - start_time)/1.e6 << " sec\n";
		GetBandsByLinearInterpolation(vsignificance,vsignificance_cp, significance[1], significance[3], significance[0], significance[4] );
		significance[2]=GetBandByLinearInterpolation(vsignificance, vsignificance_cp, 0.5);
		printf("ToS_significance -- mH=%3.3fGeV %10.5f %10.5f %10.5f %10.5f %10.5f %10.5f\n",
				evt_4e[DoPoint][0], significance[0], significance[1], significance[2], significance[3], significance[4], significance_mean); 
		fflush(stdout);

		//----------start-----------------plot the r vs cumulative probability 
		char ctmp[255];
		string ssave;
		TPaveText *pt = SetTPaveText(0.67, 0.4, 0.8, 0.7);
		pt->AddText("significance bands");
		sprintf(ctmp,"plots/significance_bands_%3.0fGeV", evt_4e[DoPoint][0]);
		ssave=ctmp;
		string stitle="; Significance; cumulative probability;";
		PlotXvsCummulativeProb plotRvsP(vsignificance, vsignificance_cp,
				significance[1], significance[3], significance[0], significance[4],
				//rm1s, rp1s, rm2s, rp2s,
				ssave, stitle, pt);
		plotRvsP.draw();
		start_time=cur_time; cur_time=clock(); cout << "\t TIME_in_plotting " << (cur_time - start_time)/1000. << " millisec\n";


		//	return 1;

		double r_CL95 = clsr95.LimitOnSignalScaleFactor(cms, &frequentist, nexps_to_build_m2lnQ);
		cout<<"\n\t\t ****CLs Observed exclusion limit on r = "<< r_CL95 <<endl;
		start_time=cur_time; cur_time=clock(); cout << "\t TIME_in_LimitOnSignalScaleFactor " << (cur_time - start_time)/1.e6 << " sec\n";
		fflush(stdout);
		evolution_CLsvsR_vR = clsr95.GetvTestedScaleFactors();	
		evolution_CLsvsR_vCLs = clsr95.GetvTestedCLs();	

		cms->SetSignalScaleFactor(1.);
		double rtmp = bys.Limit();
		cout<<"\n\t\t ****Bys Observed exclusion limit on r = "<< rtmp<<endl;
		start_time=cur_time; cur_time=clock(); cout << "\t TIME_in_BayesianLimit toys: "<< (cur_time - start_time)/1000. << " millisec\n";
		fflush(stdout);
	}
	if(1){
		LimitBands lb(&clsr95, &frequentist, &bys, cms);	
		lb.SetDebug(debug);
		lb.Bands(0.05, nexps_to_projectingLimit, true, nexps_to_build_m2lnQ, true, 2000 );

		rmean=lb.GetCLsLimitMean();
		rm1s=lb.GetCLsLimit(-1);rm2s=lb.GetCLsLimit(-2);rp1s=lb.GetCLsLimit(1);rp2s=lb.GetCLsLimit(2);
		cout<<"\t **** R@95%CL (from -2sigma to +2sigma) : ";
		printf("CombinedResultsCLs_R95 -- mH=%3.0fGeV %10.5f %10.5f %10.5f %10.5f %10.5f\n", evt_4m[DoPoint][0], rm2s, rm1s, rmean, rp1s, rp2s);

		rmean=lb.GetBysLimitMean();
		rm1s=lb.GetBysLimit(-1);rm2s=lb.GetBysLimit(-2);rp1s=lb.GetBysLimit(1);rp2s=lb.GetBysLimit(2);
		cout<<"\t **** R@95%CL (from -2sigma to +2sigma) : ";
		printf("CombinedResultsBys_R95 -- mH=%3.0fGeV %10.5f %10.5f %10.5f %10.5f %10.5f\n", evt_4m[DoPoint][0], rm2s, rm1s, rmean, rp1s, rp2s);

		//	gSystem->Exec("mkdir roots -p");
		s.Form("%dpb_clslimits_%3.0fGeV_Error%d_Seed%d", Lumi, evt_4e[DoPoint][0], bErrors, iSeed );
		FillTree(s, lb.GetDifferentialLimitsCLs() );	
		s.Form("%dpb_byslimits_%3.0fGeV_Error%d_Seed%d", Lumi, evt_4e[DoPoint][0], bErrors, iSeed );
		FillTree(s, lb.GetDifferentialLimitsBys() );	
	}

	return 1;
}
TH1D *GetTH1D(TString sfile, TString shist){
	TFile *f=new TFile(sfile);
	if(!(f->IsOpen())){	
		cout<<sfile<<" doesn't exist"<<endl;
		exit(0);
	}
	TH1D* h=(TH1D*)f->Get(shist);
	if(!h) {
		cout<<shist<<" doesn't exit"<<endl;
		exit(0);
	}
	cout<<sfile<<", "<<shist<<" has integral="<<h->Integral(0, h->GetNbinsX())<<endl;
	return h;
}
